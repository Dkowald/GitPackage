<Project>
  <!--Import generated data.-->
  <Import Project="./TestData.generated.props" />

  <!--Target under test-->
  <Import Project="../GitPackage/build/GitPackage.targets" />

  <!--Test setup-->
  <PropertyGroup>
    <TestRepository>$(MSBuildProjectDirectory)/App_Data/TestRepository</TestRepository>
    <TestWorkTreeRoot>$(MSBuildProjectDirectory)/gist</TestWorkTreeRoot>

    <TestWorkTreeFolder>$(TestWorkTreeRoot)/TestRepository/</TestWorkTreeFolder>
    <TestVersionFile>$(TestWorkTreeRoot)/TestRepository.ver</TestVersionFile>
    <TestDataFile1>$(TestWorkTreeFolder)/1</TestDataFile1>
    <TestDataFile2>$(TestWorkTreeFolder)/2</TestDataFile2>
	</PropertyGroup>

  <Target Name="_cleanWorkTreeRoot">
    <ItemGroup>
      <__folders Include="$([System.IO.Directory]::GetDirectories(&quot;$(TestWorkTreeRoot)&quot;))" />
      <__files Include="$(TestWorkTreeRoot)/*.ver"/>
    </ItemGroup>

    <Delete Files="@(__files)"/>
    <RemoveDir Directories="@(__folders)"/>

  </Target>

  <Target Name="_testRepository_Init">
    <Message Text="Test: ReBuild sample update repo" Importance="high" />
    
    <RemoveDir Directories="$(TestRepository)" Condition="Exists('$(TestRepository)')" />
    <RemoveDir Directories="$(GitPack-Cache)/$(TestRepository_CacheFolder)" Condition="Exists('$(GitPack-Cache)/$(TestRepository_CacheFolder)')" />
    <MakeDir Directories="$(TestRepository)" />

    <Exec Command="git init" WorkingDirectory="$(TestRepository)" 
          StandardOutputImportance="normal"/>

    <Touch Files="$(TestRepository)/1" AlwaysCreate="true"/>
    <Exec Command="git stage -A" WorkingDirectory="$(TestRepository)" StandardOutputImportance="normal"/>
    <Exec Command="git commit -m 1" WorkingDirectory="$(TestRepository)" StandardOutputImportance="normal"/>
    <Exec Command="git tag 1" WorkingDirectory="$(TestRepository)" StandardOutputImportance="normal"/>

    <Delete Files="gist/TestRepository.ver" Condition="Exists('gist/TestRepository.ver')"/>
    <RemoveDir Directories="gist/TestRepository" Condition="Exists('gist/TestRepository')"/>
  </Target>

  <Target Name="_testRepository_Update">
    <Message Text="Test: Update sample update repo" Importance="High"/>

    <Delete Files="$(TestRepository)/1"/>
    <Touch Files="$(TestRepository)/2" AlwaysCreate="true"/>
    <Exec Command="git stage -A" WorkingDirectory="$(TestRepository)" StandardOutputImportance="normal" />
    <Exec Command="git commit -m 2" WorkingDirectory="$(TestRepository)" StandardOutputImportance="normal"/>
    <Exec Command="git tag 2" WorkingDirectory="$(TestRepository)" StandardOutputImportance="normal"/>
  </Target>

  <Target Name="_testRepository_Delete">
    <Message Text="Test: Delete test repository (so can verify no fetch)" Importance="High"/>
    <RemoveDir Directories="$(TestRepository)" Condition="Exists('$(TestRepository)')" />
  </Target>

  <Target Name="useTestRepository">
    <ItemGroup>
      <GitPackage Include="TestRepository" Uri="$(TestRepository)"/>
    </ItemGroup>
  </Target>
  <Target Name="useTestRepository_v1">
    <ItemGroup>
      <GitPackage Include="TestRepository" Uri="$(TestRepository)" Version="1"/>
    </ItemGroup>
  </Target>
  <Target Name="useTestRepository_v2">
    <ItemGroup>
      <GitPackage Include="TestRepository" Uri="$(TestRepository)" Version="2"/>
    </ItemGroup>
  </Target>
  <Target Name="useDemoPackages">
    <ItemGroup>
      <GitPackage Include="DemoVersioned" Uri="$(TestRepository)" Version="1"/>
      <GitPackage Include="DemoUnVersioned" Uri="$(TestRepository)"/>
      <GitPackage Include="DemoVersionedToUpdate" Uri="$(TestRepository)" Version="1"/>
      <GitPackage Include="DemoUnVersionedToUpdate" Uri="$(TestRepository)"/>
    </ItemGroup>
  </Target>
  <Target Name="useSampleWebPackages">
    <ItemGroup>
      <GitPackage Include="WebSample1" Version="1.0.0" Uri="https://gist.github.com/b0e78c837464e463aded4f7336605db6.git" />
      <GitPackage Include="WebSample2" Version="1.0.0" Uri="https://gist.github.com/859715d703f5c1030c679aa394c48679.git" />
      <GitPackage Include="WebSample3" Uri="https://gist.github.com/Dkowald/28ea6f6bd38562c131a76052587c6268" />
    </ItemGroup>
  </Target>

  <Target Name="print">
    <Message Text="No Items" Condition="'@(gpInfo)' == ''" Importance="High"/>

    <Message Text="%(gpInfo.Identity)" Importance="High"/>
  </Target>
  
  <Target Name="printDetails" Inputs="@(gpInfo)" Outputs="%(Identity)">
    <Message Text="No Items" Condition="'@(gpInfo)' == ''" Importance="High"/>

    <Message Text="---%(gpInfo.Identity)---" Importance="High"/>
    <Message Text=" %(gpInfo.Uri)" Importance="High"/>
    <Message Text=" CloneDir   :'%(gpInfo.CloneFolderName)'" Importance="High"/>
    <Message Text=" Version    :'%(gpInfo.Version)'" Importance="High"/>
    <Message Text=" Actual     :'%(gpInfo.Actual)'" Importance="High"/>
    <Message Text=" VerFile    :'%(gpInfo.VersionFile)'" Importance="High"/>
    <Message Text=" Commitish  :'%(gpInfo.WorkTreeCommit)'" Importance="High"/>
    <Message Text=" WorkFolder :'%(gpInfo.WorkTreeFolder)'" Importance="High"/>
    <Message Text="-------------" Importance="High"/>
  </Target>

  <!--Base / Unit Test targets-->
  <Target Name="PruneOldPackages" DependsOnTargets="_cleanWorkTreeRoot">
    <Message Text="Test: remove pacakge with no uri and orphan worktree folder" Importance="high"/>
    
    <Touch Files="$(MSBuildProjectDirectory)/gist/old.ver" AlwaysCreate="true"/>
    <MakeDir Directories="$(MSBuildProjectDirectory)/gist/old" />
    <Touch Files="$(MSBuildProjectDirectory)/gist/old/placeholder.txt" AlwaysCreate="true"/>

    <MakeDir Directories="$(MSBuildProjectDirectory)/gist/Orphan" />
    <Touch Files="$(MSBuildProjectDirectory)/gist/Orphan/placeholder.txt" AlwaysCreate="true"/>
    
    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository;_gpInit;_gpPrune" />

    <Error Condition="Exists('$(MSBuildProjectDirectory)/gist/old.ver')"
           Text="Test: Expected old version file to be deleted"/>
    <Error Condition="Exists('$(MSBuildProjectDirectory)/gist/old/')"
           Text="Test: Expected old workspace folder to be deleted"/>
    
    <Error Condition="Exists('$(MSBuildProjectDirectory)/gist/Orphan/')"
           Text="Test: Expected orphan workspace folder to be deleted"/>

    <Error Condition="@(gpInfo->count()) &gt; 1"
           Text="test: Expect remaining info items to be pruned"/>
    
    <Message Text="Test: PASS" Importance="high"/>
  </Target>
  
  <Target Name="CollectPackagesToUpdate" DependsOnTargets="_cleanWorkTreeRoot">
    <Message Text="Test: collect packages with missing version file, or version mismatch" Importance="high"/>

    <!--Setup so some dont need update-->
    <WriteLinesToFile Overwrite="true" File="$(TestWorkTreeRoot)/DemoVersioned.ver" 
                      Lines="Version: 1" />
    <WriteLinesToFile Overwrite="true" File="$(TestWorkTreeRoot)/DemoUnversioned.ver" 
                      Lines="Version: " />

    <MSBuild Projects ="$(MSBuildProjectFullPath)"
             Targets="useDemoPackages;_gpInit;_gpCollectUpdates" />
    
    <Error Text="Expected need update for versioned" 
           Condition="@(gpVersionedToUpdate) != 'DemoVersionedToUpdate'"/>

    <Error Text="Expected need update for un-versioned" 
           Condition="@(gpUnversionedToUpdate) != 'DemoUnVersionedToUpdate'"/>

    <Error Text="Expected need to checkout updating packages" 
           Condition="@(gpToUpdate) != 'DemoVersionedToUpdate;DemoUnVersionedToUpdate'"/>

    <Message Text="Test: PASS" Importance="High" />
  </Target>

  <Target Name="CloneMissing" DependsOnTargets="_testRepository_Init">
    <Message Text="Test: Clone the repository when it doesnt exist." />

    <RemoveDir Directories="$(TestRepository_CacheFolder)" />
    
    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository;_gpInit;_gpCollectUpdates;_gpClone" />
    
    <Error Condition="!Exists('$(GitPack-Cache)/$(TestRepository_CacheFolder)')"
           Text="Test: Expected repository to be cloned" />
    
    <Message Text="Test: PASS" Importance="high"/>
    
  </Target>
  
  <Target Name="CheckoutUnversionedPackages" DependsOnTargets="_cleanWorkTreeRoot;_testRepository_Init">
    <Message Text="Test: Checkout unversioned package" Importance="high"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)"
             Targets="useTestRepository;_gpInit;_gpPrune;_gpCollectUpdates;_gpClone;_gpFetchUnversioned;_gpCheckoutPackages" />

    <Error Text="Expected version file" Condition="!Exists('$(TestVersionFile)')"/>
    <Error Text="Expected checked out file" Condition="!Exists('$(TestDataFile1)')" />

    <Message Text="Test: PASS" Importance="High" />

  </Target>

  <Target Name="CheckoutVersionedPackages" DependsOnTargets="_cleanWorkTreeRoot;_testRepository_Init">
    <Message Text="Test: Checkout versioned package" Importance="high"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)"
             Targets="useTestRepository_v1;_gpInit;_gpPrune;_gpCollectUpdates;_gpClone;_gpFetchVersioned;_gpCheckoutPackages" />

    <Error Text="Expected version file" Condition="!Exists('$(TestVersionFile)')"/>
    <Error Text="Expected checked out file" Condition="!Exists('$(TestDataFile1)')" />

    <Message Text="Test: PASS" Importance="High" />

  </Target>
  
  <!--Senario Test cases-->
  <Target Name="AddAndRemoveVersioned" DependsOnTargets="_testRepository_Init;_testRepository_Update">
    <Message Text="Test: add remove versioned package" Importance="High"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository_v2;GitPackRestore" />
    <Error Condition="!Exists('$(GitPack-Cache)/$(TestRepository_CacheFolder)')" Text="Expected cached clone"  />
    <Error Condition="!Exists('gist/TestRepository.ver')" Text="Expected version file"  />
    <Error Condition="!Exists('gist/TestRepository/2')" Text="Expected check-out file 2"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="GitPackRestore" />

    <Error Condition="Exists('gist/TestRepository.ver')" Text="Expected version file removed"  />
    <Error Condition="Exists('gist/TestRepository')" Text="Expected folder remove"/>

    <Message Importance="High" Text="Test: PASS"/>
  </Target>

	<Target Name="AddAndRemoveUnversioned" DependsOnTargets="_testRepository_Init">
		
		<Message Importance="High" Text="Test: Add and remove un-versioned package"/>
		
		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
		         Targets="useTestRepository;GitPackRestore" />

		<Error Condition="!Exists('$(GitPack-Cache)/$(TestRepository_CacheFolder)')" Text="Expected cached clone"  />
		<Error Condition="!Exists('gist/TestRepository.ver')" Text="Expected version file"  />
		<Error Condition="!Exists('gist/TestRepository/1')" Text="Expected check-out file 1"/>

		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
		         Targets="GitPackRestore" />

		<Error Condition="Exists('gist/TestRepository.ver')" Text="Expected no version file"  />
		<Error Condition="Exists('gist/TestRepository/')" Text="Expected no work-tree folder"/>

		<Message Importance="High" Text="Test: PASS"/>
	</Target>
  
  <Target Name="RefreshUnversioned" DependsOnTargets="_testRepository_Init">
		
		<Message Importance="High" Text="Test: un-versioned package update with refresh build target"/>

		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
		         Targets="useTestRepository;GitPackRestore" />

		<Error Condition="!Exists('gist/TestRepository/1')" Text="Expected check-out file"/>
		
		<CallTarget Targets="_testRepository_Update" />
		
    <Message Text="Refresh unversioned uses a fetch" />
		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
		         Targets="useTestRepository;GitPackRefresh" />

		<Error Condition="!Exists('gist/TestRepository/2')" Text="Expected check-out file: 2"/>
		<Message Importance="High" Text="Test: PASS"  />
	</Target>

  <Target Name="RefreshVersioned" DependsOnTargets="_testRepository_Init">
		
    <Message Importance="High" Text="Test: versioned package no fetch on refresh"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected check-out file"/>
		
    <CallTarget Targets="_testRepository_Delete" />
		
    <Message Text="Refresh versioned doesnt need to fetch" />
    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="useTestRepository_v1;GitPackRefresh" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected check-out file: 1"/>
    <Message Importance="High" Text="Test: PASS"  />
  </Target>

	<Target Name="AutoRefreshUnversioned" DependsOnTargets="_testRepository_Init">

		<Message Importance="High" Text="Test: Auto refresh un-versioned package"/>

		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
		         Targets="useTestRepository;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected check-out file"/>
		
		<CallTarget Targets="_testRepository_Update" />

    <Message Text="Delete version file to trigger restore with fetch on unversioned" />
		<Delete Files="gist/TestRepository.ver"/>

		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2;GitPack-AutoRestore=true"
		         Targets="useTestRepository;gpAutoRestore" />

    <Error Condition="!Exists('gist/TestRepository/2')" Text="Expected updated file 2"/>

		<Message Importance="High" Text="Test: PASS"/>

	</Target>

  <Target Name="AutoRefreshVersioned" DependsOnTargets="_testRepository_Init">

    <Message Importance="High" Text="Test: Auto refresh versioned package"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file 1"/>
		
    <CallTarget Targets="_testRepository_Update" />

    <Message Text="Delete version file no fetch with versioned" />
    <Delete Files="gist/TestRepository.ver"/>
    <CallTarget Targets="_testRepository_Delete"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="useTestRepository_v1;gpAutoRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file 1"/>

    <Message Importance="High" Text="Test: PASS"/>

  </Target>

	<Target Name="VersionedPackageUseFetchToGetNewVersion" DependsOnTargets="_testRepository_Init">

		<Message Importance="High" Text="Test: Versioned package update" />
		
		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
		         Targets="useTestRepository_v1;GitPackRestore" />

		<Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file: 1"  />

    <CallTarget Targets="_testRepository_Update"/>

		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
		         Targets="useTestRepository_v2;GitPackRestore" />

		<Error Condition="!Exists('gist/TestRepository/2')" Text="Expected file: 2"  />

		<Message Importance="High" Text="Test: PASS" />
	</Target>

  <Target Name="RestoreUnversionedDoesNotFetch" DependsOnTargets="_testRepository_Init">
    <Message Importance="High" Text="Test: Get package that will be updated" />
    
    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file: 1"  />

    <Message Text="Delete test repository so fetch would fail" />
    <CallTarget Targets="_testRepository_Delete" />

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="useTestRepository;GitPackRestore" />
    <Error Condition="!Exists('gist/TestRepository/1')" 
           Text="Expected GitPackRestore not to fetch new stuff"  />

    <Message Text="Test: PASS" Importance="High"/>
  </Target>

  <Target Name="PackageUsedInMultipleProjects" DependsOnTargets="_testRepository_Init">
    
    <Message Importance="High" Text="Test: Checkout in different projects"/>

    <RemoveDir Directories="App_Data/OtherTestProject" Condition="Exists('App_Data/OtherProject')"/>
    <Copy DestinationFolder="App_Data/OtherTestProject" SourceFiles="TestData/OtherTestProject/OtherTestProject.csproj"/>

    <PropertyGroup>
      <Other>$(MSBuildProjectDirectory)/App_Data/OtherTestProject</Other>
      <OtherProject>$(Other)/OtherTestProject.csproj</OtherProject>
    </PropertyGroup>
    
    <MSBuild Projects ="$(OtherProject)" Properties="Run=1"
             Targets="Clean" />
		
    <Error Condition="Exists('$(Other)/gist')" Text="Expected clean folder in other project"  /> 

    <MSBuild Projects ="$(OtherProject)" Properties="Run=2"
             Targets="GitPackRestore" />

    <Error Condition="!Exists('$(Other)/gist/TestRepository/')" Text="Expected folder for un-versioned"  /> 
    <Error Condition="!Exists('$(Other)/gist/TestRepository/1')" Text="Expected file: 1"  />

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=3"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/')" Text="Expected folder for un-versioned"  /> 
    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file: 1"  />

    <Message Importance="High" Text="Test: PASS" />
  </Target>

  <Target Name="UseFetchToGetSpecifiedVersion" DependsOnTargets="_testRepository_Init">

    <Message Importance="High" Text="Test: Versioned package triggers fetch if needed"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file: 1"  />

    <CallTarget Targets="_testRepository_Update" />

    <Message Text="Update to get a version that is not in local clone."/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="useTestRepository_v2;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/2')" Text="Expected file: 2"  />

    <Message Importance="High" Text="Test: PASS"/>

  </Target>

  <Target Name="SwapBetweenVersionAndUnversioned" DependsOnTargets="_testRepository_Init">

    <Message Importance="High" Text="Test: Swapping version to unversion"/>

    <CallTarget Targets="_testRepository_Update" />

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file: 1"  />

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="useTestRepository;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/2')" Text="Expected file: 2"  />

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=3"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Error Condition="!Exists('gist/TestRepository/1')" Text="Expected file: 1"  />

    <Message Importance="High" Text="Test: PASS"/>

  </Target>

  <Target Name="RestoreVersionedAfterManualFileChange" DependsOnTargets="_testRepository_Init">

    <Message Text="Manual file changes are re-set when resore package" Importance="High"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Delete Files="$(TestDataFile1)" />
    <Touch Files="$(TestWorkTreeFolder)/other.txt" AlwaysCreate="true"/>

    <Delete Files="$(TestVersionFile)" />

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=2"
             Targets="useTestRepository_v1;GitPackRestore" />

    <Error Text="Expected restore to repair package folder" 
           Condition="!Exists('$(TestDataFile1)') Or Exists('$(TestWorkTreeFolder)/other.txt')"/>

    <Message Text="Test: PASS" Importance="High" />
  </Target>

  <Target Name="SamplePackagesNeedingClone">
    <Message Text="Test: use sample repositories from web needing clone"/>

    <RemoveDir Directories="$(GitPack-Cache)/$(WebSample1_CacheFolder)"/>
    <RemoveDir Directories="$(GitPack-Cache)/$(WebSample2_CacheFolder)"/>
    <RemoveDir Directories="$(GitPack-Cache)/$(WebSample3_CacheFolder)"/>

    <MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
             Targets="useSampleWebPackages;GitPackRestore" />

    <Error Text="Expected version file for web sample 1" 
           Condition="!Exists('$(TestWorkTreeRoot)/WebSample1.ver')" />
    <Error Text="Expected version file for web sample 2" 
           Condition="!Exists('$(TestWorkTreeRoot)/WebSample2.ver')" />
    <Error Text="Expected version file for web sample 3" 
           Condition="!Exists('$(TestWorkTreeRoot)/WebSample3.ver')" />

    <Message Text="Test: PASS" Importance="High"/>
  </Target>

	<Target Name="VersionedPackageInvalidVersion" DependsOnTargets="_testRepository_Init">

		<Message Importance="High" Text="Test: Versioned package fails build if no version found"/>

		<MSBuild Projects ="$(MSBuildProjectFullPath)" Properties="Run=1"
		         Targets="useTestRepository_v2;GitPackRestore"
             ContinueOnError="WarnAndContinue" />
		
		<Error Text="Expected build fail" Condition=" '$(MSBuildLastTaskResult)' == 'true'"/>

		<Message Importance="High" Text="Test: PASS (expected build fail)"/>

	</Target>
</Project>